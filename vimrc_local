mapclear

" first the disabled features due to security concerns
set modelines=0         " no modelines, see http://www.guninski.com/vim1.html
"let g:secure_modelines_verbose=1 " securemodelines vimscript


set autoindent          " always set autoindenting on
set autoread                    " watch for file changes by other programs
set backspace=indent,eol,start
set hlsearch
set hidden                      " allow editing multiple unsaved buffers
set ignorecase                  " use case-insensitive matching
set incsearch                   " show matches as soon as possible
set lazyredraw                  " Do not redraw screen while executing macros
set noautowrite                 " don't automatically write on :next, etc
set nocompatible                " vim defaults, not vi!
set nrformats-=octal            " Don't consider numbers starting with 0 as octal when incrementing/decrementing via c-a, c-x
set ruler
set scrolloff=5                 " keep at least 5 lines above/below cursor
set sidescrolloff=5             " keep at least 5 columns left/right of cursor
set shiftwidth=2
set showbreak=>\ 
set showcmd             " Show (partial) command in status line.
set smartcase
set nostartofline         " Do not go to first character of line when changing buffers.
set tabstop=2

set path=., " the default of path includes '/usr/include'. I do not want this.

"autocomplete like the bash
"chance completemode to get a more natural feeling
"see http://vim.wikia.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE
set wildmode=longest,list 
set completeopt=longest,menuone

" Ohne Menus
set guioptions=aeiM
" Keine Dialoge
set guioptions+=c

" Prevent DrChip menu
let g:DrChipTopLvlMenu = ""

" Statusline:
set statusline=%<%f\ %h%y%m%r%=%-14.(%l,%c%V%)\ %P
set laststatus=2


" Persistent undo file:
set undofile
set undodir=$HOME/.vim/.undo
silent call system('mkdir -p ' . &undodir) " create the directory
set undolevels=1000             " number of forgivable mistakes


" Set up the colorscheme in the console.
if !has('gui_running') && $TERM == "xterm"
	" Tell Vim that xterm understands (at least) 16 colors
	set t_Co=16

	" Load correct Xresources
	silent !term-recolor.sh < ~/dotfiles/solarized_xresources/Xresources.original

	" Unload Xresources when vim finishes.
	autocmd VimLeave * !term-recolor-current.sh
end

" Enable syntax highlighting
syntax enable

" Set default background automatically.
let g:background = system('get_current_colorscheme.sh')
if g:background =~? "dark\\|light"
	let &background= substitute(g:background, "\n", "", "")
else
	set background=dark
end

" No menu.
let g:solarized_menu=0

" Setup the solarized colorscheme
colorscheme solarized
call togglebg#map("<F4>")



filetype plugin on


"""""""""""""""""""""""""""
"""" Latex-Suite Stuff.
"""""""""""""""""""""""""""
" IMPORTANT: grep will sometimes skip displaying the file name if you
" search in a singe file. This will confuse Latex-Suite. Set your grep
" program to always generate a file-name.
set grepprg=grep\ -nH\ $*

" OPTIONAL: This enables automatic indentation as you type.
filetype indent on

" OPTIONAL: Starting with Vim 7, the filetype of empty .tex files defaults to
" 'plaintex' instead of 'tex', which results in vim-latex not being loaded.
" The following changes the default filetype back to 'tex':
let g:tex_flavor='latex'


" No spell-checking in tex comments (see syntax/tex.vim)
let g:tex_comment_nospell = 1


"" Mit <C-C> Einrückungen löschen. (mit <C-T> hinzufügen).
inoremap <C-C> <C-D>

" <C-J> auf <C-D> ummappen (Jump zum <++>)
" In  Normal, insert
imap <C-D> <Plug>IMAP_JumpForward
nmap <C-D> <Plug>IMAP_JumpForward
vmap <C-D> <Plug>IMAP_JumpForward

" Do not change into select mode after IMAP_JumpForward
let g:Imap_GoToSelectMode = 0



"tabulator um durch den buffer zu wechseln
nnoremap <silent> <C-Tab> :bnext<CR>
nnoremap <silent> <S-C-Tab> :bprevious<CR>


" Disable auto-comment in C,cpp with the // comments.
au FileType c,cpp setlocal comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,f://
" was: comments=sO:*\ -,mO:*\ \ ,exO:*/,s1:/*,mb:*,ex:*/,://


""" Enhanced Commentify:
" Nice indentation:
let EnhCommentifyRespectIndent = 'yes'
let EnhCommentifyPretty = 'yes'
let EnhCommentifyUseBlockIndent = 'yes'
" Use large comment blocks
let EnhCommentifyMultiPartBlocks = 'yes'
" Own Bindings
let EnhCommentifyUserBindings = 'yes'
" Für Markierungen und sowas wie 3<C-C> im Normalmodus:
nmap <silent> <c-c> :MyEnhancedCommentify<CR>
vmap <silent> <c-c> :MyEnhancedCommentify<CR>
command! -range MyEnhancedCommentify call EnhancedCommentify('yes', 'first', <line1>, <line2>)

" show tabs:?
set list
set listchars=tab:\|\ 


"" Header gates einfügen:
function! s:insert_gates()
  let gatename = substitute(toupper(expand("%:t")), "\\.", "_", "g")
  execute "normal! i#ifndef " . gatename
  execute "normal! o#define " . gatename
  execute "normal! Go#endif /* " . gatename . " */"
  normal! kk
endfunction

autocmd BufNewFile *.{h,hpp} call <SID>insert_gates()

" Alt-P in insert-mode: insert register 0
imap <a-p> <c-r>0


" Helper function: Is this a svn repo?
" ====================================
function Is_svn()
	return system('svn info > /dev/null 2>&1 && echo 1 || echo 0')
endfunction

" Show a SVN/Git-diff in a new buffer
" ===================================
map <silent> <F10> :call Show_svn_diff()<cr>gg
function Show_svn_diff()
	let is_svn = Is_svn()
	if is_svn
		let filename=expand("%")
		new
		exe "0read !svn diff ".filename
	else
		let opwd=getcwd()
		let dirname=expand("%:h")
		let filename=expand("%:t")
		new
		" Change into directory of file and back, since git has to be invoked
		" inside the git tree.
		exec 'lcd ' . dirname
		exe "0read !git diff HEAD ".filename
		exec 'lcd ' . opwd
	end
	set syntax=diff buftype=nofile
	setlocal nomodifiable
	setlocal bufhidden=delete
	nmap <silent><buffer> <c-c> :bdel<cr>
endfunction

" Show the SVN base/Git HEAD in a new buffer with enabled diff
" ============================================================
map <silent> <S-F10> :call Show_full_svn_diff()<cr>gg
function Show_full_svn_diff()
	let is_svn = Is_svn()
	" Save filetype
	let ft=&ft
	diffthis
	if is_svn
		let filename=expand("%")
		rightb vnew
		exe "0read !svn cat ".filename
	else
		let opwd=getcwd()
		let dirname=expand("%:h")
		let filename=expand("%:t")
		rightb vnew
		" Change into directory of file and back, since git has to be invoked
		" inside the git tree.
		exec 'lcd ' . dirname
		exe "0read !git show HEAD:$(relpath $(git rev-parse --show-toplevel) ".filename . ")"
		exec 'lcd ' . opwd
	end
	normal jdd
	setlocal buftype=nofile
	setlocal nomodifiable
	setlocal bufhidden=delete
	" Apply filetype
	exec 'setlocal ft=' . ft
	diffthis
	autocmd BufDelete <buffer> diffoff!
	nmap <silent><buffer> <c-c> :bdel<cr>
endfunction





"""""""""""""""""""""""
" Spellchecker
"""""""""""""""""""""""

let spellst=["de", "en"]

function Sel_lang()
        let g:langcnt = (g:langcnt+1) % len (g:spellst)
        let lang = g:spellst[g:langcnt]
        echo "spelllang = " . lang
        exe "set spelllang=".lang
endfunction 

let langcnt=0
set spelllang="en"

" F2 - Spellcheck an/aus
map <silent> <F2> :set spell!<CR>:echo "Spell check: " . strpart("offon", 3 * &spell, 3)<cr>
" F3 - Sprache Ändern
map <silent> <F3> :call Sel_lang() <CR>

"""""""""""""""""""""""
" END Spellchecker
"""""""""""""""""""""""


" Speichern mit <c-s>
map <c-s> :w<cr>
imap <c-s> <c-o>:w<cr>


" Redefine 'Y' such that it behaves like 'D' and 'C'
map Y y$

" Move to the last known cursor position and unfold it.
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
au BufReadPost * normal! zv


" Space in normal-mode => toggle folding (if there is a fold)
nnoremap <silent> <Space> @=(foldlevel('.')?'za':'l')<CR>

" Shift-Space in normal-mode => close fold (if there is a fold)
nnoremap <silent> <S-Space> @=(foldlevel('.')?'zc':'l')<CR>


" shift + insert -> paste in clip board
inoremap <S-Insert> <C-R>*


" Mapping für HiLinkTrace
map <unique> <Leader>hlt <Plug>HiLinkTrace




"""""""""""""""
" Mappings for the swap words plugin
"""""""""""""""
vmap <silent> gs <Plug>SwapWords
nmap <silent> gs <Plug>SwapWords

map <silent> gS <Plug>ResetSwapWords


"""""""""""""""
" Implementation of g/
" Search for the next motion.
"""""""""""""""

" Mapping: use the selection
vmap <silent> g/ <esc>:call SearchMotion("visual")<CR>

" Mapping: use a text object
nmap <silent> g/ :set operatorfunc=SearchMotion<CR>g@

function SearchMotion( mode )
	if a:mode == "visual"
		let startpos = getpos("'<")
		let endpos = getpos("'>")
	elseif a:mode == "char"
		let startpos = getpos("'[")
		let endpos = getpos("']")
	else
		exit
	end

	" Only work within one line
	if startpos[1] == endpos[1]
		let line = getline(startpos[1])
		let wordStart = startpos[2]-1
		let wordEnd = endpos[2]-1
		let word = line[(wordStart):(wordEnd)]
		let word = escape(word, '\')
		" call search(word)
		" call matchadd('search', word)
		call histadd('search', word)
		let @/=word
		" if &hlsearch
		" 	echomsg "bla"
		" 	set hlsearch
		" end
		" normal n
		" let b:searchedWord = word
	end
endfunction



" Insert a '\langde{' before and '}\langen{}' after the selection.
" Helper Function: Insert at position
function InsertAt(string, pos, insertstring)
	if a:pos <= 0
		return a:insertstring . a:string
	else
		return a:string[:(a:pos-1)] . a:insertstring . a:string[(a:pos):]
	endif
endfunction

function InsertLang()
	" Get the positions from the last (or current) selection
	let startpos = getpos("'<")
	let endpos = getpos("'>")
	" Modify the lines
	let endline = getline(endpos[1])
	let endline = InsertAt(endline, endpos[2], '}\lang' . g:spellst[(g:langcnt+1)%len(g:spellst)] . '{}')
	call setline(endpos[1], endline)
	let startline = getline(startpos[1])
	let startline = InsertAt(startline, startpos[2]-1, '\lang' . g:spellst[g:langcnt] . '{')
	call setline(startpos[1], startline)
	" Set the cursor position
	if endpos[2] == 2147483647
		call setpos('.', [endpos[0], endpos[1], endpos[2], 0])
	else
		call setpos('.', [endpos[0], endpos[1], endpos[2]+18, 0])
	endif
endfunction

" Mapping: Insert the language commands and goto insert mode.
vmap <silent> gl <esc>:call InsertLang()<CR>i


" Write with sudo (if you forgot to start vim as root)
" % is replaced by current file name
command Sudow w !sudo tee % > /dev/null




" Delete buffer while keeping window layout (don't close buffer's windows).
" Version 2008-11-18 from http://vim.wikia.com/wiki/VimTip165
if v:version < 700 || exists('loaded_bclose') || &cp
  finish
else
	let loaded_bclose = 1
	if !exists('bdelete_multiple')
		let bdelete_multiple = 1
	endif

	" Display an error message.
	function! s:Warn(msg)
		echohl ErrorMsg
		echomsg a:msg
		echohl NONE
	endfunction

	" Command ':Bdelete' executes ':bd' to delete buffer in current window.
	" The window will show the alternate buffer (Ctrl-^) if it exists,
	" or the previous buffer (:bp), or a blank buffer if no previous.
	" Command ':Bdelete!' is the same, but executes ':bd!' (discard changes).
	" An optional argument can specify which buffer to delete (name or number).
	function! s:Bdelete(bang, buffer)
		if empty(a:buffer)
			let btarget = bufnr('%')
		elseif a:buffer =~ '^\d\+$'
			let btarget = bufnr(str2nr(a:buffer))
		else
			let btarget = bufnr(a:buffer)
		endif
		if btarget < 0
			call s:Warn('No matching buffer for '.a:buffer)
			return
		endif
		if empty(a:bang) && getbufvar(btarget, '&modified')
			call s:Warn('No write since last change for buffer '.btarget.' (use :Bdelete!)')
			return
		endif
		" Numbers of windows that view target buffer which we will delete.
		let wnums = filter(range(1, winnr('$')), 'winbufnr(v:val) == btarget')
		if !g:bdelete_multiple && len(wnums) > 1
			call s:Warn('Buffer is in multiple windows (use ":let bdelete_multiple=1")')
			return
		endif
		let wcurrent = winnr()
		for w in wnums
			execute w.'wincmd w'
			let prevbuf = bufnr('#')
			if prevbuf > 0 && buflisted(prevbuf) && prevbuf != w
				buffer #
			else
				bprevious
			endif
			if btarget == bufnr('%')
				" Numbers of listed buffers which are not the target to be deleted.
				let blisted = filter(range(1, bufnr('$')), 'buflisted(v:val) && v:val != btarget')
				" Listed, not target, and not displayed.
				let bhidden = filter(copy(blisted), 'bufwinnr(v:val) < 0')
				" Take the first buffer, if any (could be more intelligent).
				let bjump = (bhidden + blisted + [-1])[0]
				if bjump > 0
					execute 'buffer '.bjump
				else
					execute 'enew'.a:bang
				endif
			endif
		endfor
		execute 'bdelete'.a:bang.' '.btarget
		execute wcurrent.'wincmd w'
	endfunction
	command! -bang -complete=buffer -nargs=? Bdelete call s:Bdelete('<bang>', '<args>')
	" nnoremap <silent> <Leader>bd :Bdelete<CR>
endif


" Always search case-sensitive when using g*
nnoremap <silent> g* /\<<C-R>=expand('<cword>')<CR>\>\C<CR>



" Times the number of times a particular command takes to execute the specified number of times (in seconds).
function! HowLong( command, numberOfTimes )
	" We don't want to be prompted by a message if the command being tried is
	" an echo as that would slow things down while waiting for user input.
	let more = &more
	set nomore
	let startTime = reltime()
	for i in range( a:numberOfTimes )
		execute a:command
	endfor
	let result = reltimestr(reltime(startTime))
	let &more = more
	return result
endfunction

set guifont=Hack\ 10
